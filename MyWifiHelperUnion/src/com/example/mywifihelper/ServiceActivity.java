package com.example.mywifihelper;import java.io.BufferedWriter;import java.io.DataInputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.net.InetSocketAddress;import java.net.ServerSocket;import java.net.Socket;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import com.example.jpgtovideo.VideoCapture;import com.example.mywifihelper.ClientActivity.ServerThread;import com.example.service.ClientNetService;import com.example.util.AppManager;import com.webdesign688.shot360.R;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.Message;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.Toast;public class ServiceActivity extends Activity{	private Button startService;    private List<Socket> list =new ArrayList<Socket>();	private List<BufferedWriter> listb =new ArrayList<BufferedWriter>();	private List<String> listf =new ArrayList<String>();	private Button mBtnCamera;	private Button mBtnInvFile;	private View mBtnInvFilea;    private Handler handler =new Handler(){    	public void handleMessage(android.os.Message msg) {    		switch (msg.what) {    		case 1:    			Toast.makeText(getApplicationContext(), msg.obj.toString(), 0).show();    			break;    		case 4:    			Toast.makeText(getApplicationContext(), "文件服务出错关闭", 0).show();    			break;    		default:    			break;    		}    	};       };	private Intent serviceIntent;	private Button startSetOptions;	private Button mBtnInvCloseCamera;	private Button mBtnInvVideo;	private Button startService1;	private ServerSocket server;	private ServerSocket server1;	private Button mBtnInvFilea1;	private Button startSee;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.service);		serviceIntent = new Intent();		AppManager.getAppManager().addActivity(this);		// 开启服务		serviceIntent.setClass(this, ClientNetService.class);		stopService(serviceIntent);		startService =(Button)this.findViewById(R.id.startService);		startService.setOnClickListener(listener);		mBtnCamera =(Button)this.findViewById(R.id.mBtnCamera);		mBtnCamera.setOnClickListener(listener);		mBtnInvFile =(Button)this.findViewById(R.id.mBtnInvFile);		mBtnInvFile.setOnClickListener(listener);		mBtnInvFilea =(Button)this.findViewById(R.id.mBtnInvFilea);		mBtnInvFilea.setOnClickListener(listener);		mBtnInvFilea1 =(Button)this.findViewById(R.id.mBtnInvFilea1);		mBtnInvFilea1.setOnClickListener(listener);		startSee =(Button)this.findViewById(R.id.startSee);		startSee.setOnClickListener(listener);				startSetOptions =(Button)this.findViewById(R.id.startSetOptions);		startSetOptions.setOnClickListener(listener);		mBtnInvCloseCamera =(Button)this.findViewById(R.id.mBtnInvCloseCamera);		mBtnInvCloseCamera.setOnClickListener(listener);		mBtnInvVideo =(Button)this.findViewById(R.id.mBtnInvVideo);		mBtnInvVideo.setOnClickListener(listener);		startService1 =(Button)this.findViewById(R.id.startService1);		startService1.setOnClickListener(listener);			}		OnClickListener listener =new OnClickListener() {		@Override		public void onClick(View v) {			switch (v.getId()) {			case R.id.startSee:				startActivity(new Intent(getApplicationContext(), ReviewActivity.class));				break;			case R.id.startSetOptions:				for(int i=0;i<list.size();i++){					try {						  BufferedWriter out = new BufferedWriter(new OutputStreamWriter(list.get(i).getOutputStream()));						  out.write("OPTION");						  out.flush();					} catch (IOException e) {						// TODO Auto-generated catch block										}				}               break;			case R.id.startService1:				if(server!=null){					try {						for(int i=0;i<list.size();i++){							list.get(i).close();						}						list.clear();						server.close();					} catch (IOException e) {										}				}				break;			case R.id.mBtnInvCloseCamera:				for(int i=0;i<list.size();i++){					try {						  BufferedWriter out = new BufferedWriter(new OutputStreamWriter(list.get(i).getOutputStream()));						  out.write("OPTAGA");						  out.flush();					} catch (IOException e) {										}				}				break;							case R.id.startService:				 new Thread(new Runnable() {					@Override					public void run() {						if(server!=null){							try {								server.close();							} catch (IOException e) {														}						}		            	 try {							server=new ServerSocket(9000);						} catch (IOException e1) {							e1.printStackTrace();						}			            while(true){//监听客户端请求，启个线程处理			            	 try {			                Socket socket = server.accept();			                new ServerThread(socket);			            		} catch (IOException e1) {									// TODO Auto-generated catch block									e1.printStackTrace();								}			            }				}}).start();				break;			case R.id.mBtnCamera:				for(int i=0;i<list.size();i++){					try {						  BufferedWriter out = new BufferedWriter(new OutputStreamWriter(list.get(i).getOutputStream()));						  out.write("CAMERA");						  out.flush();					} catch (IOException e) {										}				}				break;				//关闭文件服务 			case R.id.mBtnInvFilea1:				if(server1!=null){					try {						server1.close();					} catch (IOException e) {										}				}				break;				//开启文件服务			case R.id.mBtnInvFilea:				Thread receiveFileThread = new Thread(new Runnable(){										@Override					public void run() {						listf.clear();						if(server1!=null){							try {								server1.close();							} catch (IOException e) {								// TODO Auto-generated catch block														}						}		            	 try {		            		 server1=new ServerSocket(9999);						} catch (IOException e1) {							// TODO Auto-generated catch block							e1.printStackTrace();						}												boolean flag =true;						while(true){							Socket client;							try {								client = server1.accept();								new ServerThread1(client);							} catch (IOException e1) {															}						}					}				});				receiveFileThread.start();				break;				//收文件			case R.id.mBtnInvFile:				for(int i=0;i<list.size();i++){					try {						  BufferedWriter out = new BufferedWriter(new OutputStreamWriter(list.get(i).getOutputStream()));						  out.write("FILE");						  out.flush();					} catch (IOException e) {										}				}				break;			case R.id.mBtnInvVideo:				// String savePath = Environment.getExternalStorageDirectory().getPath() + "/"+"1133" ;				 //List<String> lists=	 getFiles(savePath);				if(listf.size()>0){ 				VideoCapture.start(ServiceActivity.this, "11",handler,"8",listf);				}else{	    			Toast.makeText(getApplicationContext(), "暂时没有文件", 0).show();				}				 break;			default:				break;			}		}	};	void ReceiveFile(){	}	private List<String> getFiles(String string) {       List<String> lists =new ArrayList<String>();        File file = new File(string);        File[] files = file.listFiles();        for (int j = 0; j < files.length; j++) {            String name = files[j].getName();            if (files[j].isFile() & name.endsWith(".jpg") || name.endsWith(".png") || name.endsWith(".bmp") || name.endsWith(".gif") || name.endsWith(".jpeg")) {            	lists.add(files[j].getAbsolutePath());            }        }		return lists;    }     			/**	 * 服务器线程类	 */	class ServerThread extends Thread{	    private Socket client;	    private  InputStream in = null;	    private String name;		private BufferedWriter out;	      	    public ServerThread(Socket s)throws IOException{	        client = s;		      Log.i("LJPPFF", client.toString());	        out =new BufferedWriter(new OutputStreamWriter(client.getOutputStream()));	        in = client.getInputStream();	        boolean haS =false;	      for(int i=0;i<list.size();i++){	    	  if(list.get(i).equals(client)){	    		  haS =true;	    	  }	      }	      Log.i("LJPPFF","haS"+haS);	      if(!haS){	    	  list.add(client);	    	  listb.add(out);	      }	 	}	}	/**	 * 文件接收 	 * @author liujun	 *	 */		class ServerThread1 extends Thread{			 FileOutputStream fos = null;			 Socket client;			DataInputStream dis = null;		      		    public ServerThread1(Socket s)throws IOException{				try{			        client = s;		           dis = new DataInputStream(client.getInputStream());		           //文件名和长度		           String fileName = dis.readUTF();		           long fileLength = dis.readLong();					 String savePath = Environment.getExternalStorageDirectory().getPath() + "/"+"1133" ;					File  file1 =new File(savePath);					if(!file1.exists()){						file1.mkdirs();					}		             fos = new FileOutputStream(new File(Environment.getExternalStorageDirectory().getPath() + "/1133/" + fileName));		             String filestring = Environment.getExternalStorageDirectory().getPath() + "/1133/" + fileName;		            boolean isflagf =false;		             for(int i=0;i<listf.size();i++){		            	if(listf.get(i).equals(filestring)){		            		isflagf =true;		            	}		             }		             if(!isflagf){		            	 listf.add(filestring);		             }		             		            byte[] sendBytes =new byte[1024];		            int transLen =0;		            while(true){		                int read =0;		                read = dis.read(sendBytes);		                if(read == -1)		                    break;		                transLen += read;		                System.out.println("接收文件进度" +100 * transLen/fileLength +"%...");		                fos.write(sendBytes,0, read);		                fos.flush();		            }		            client.close();									}catch(Exception e){				}finally{		           try {		   			if(dis !=null)		                   dis.close();		               if(fos !=null)		                   fos.close();					} catch (IOException e) {										}				}		  }	}}