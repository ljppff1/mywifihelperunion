package com.example.mywifihelper;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.DataOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.net.ServerSocket;import java.net.Socket;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import com.example.service.BroadcastFinal;import com.example.service.ClientNetService;import com.example.service.ImageUtilbase64bitmap;import com.example.service.ListenerSocketReceiver;import com.webdesign688.shot360.R;import android.app.Activity;import android.content.Intent;import android.content.IntentFilter;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.text.TextUtils;import android.view.TextureView;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Switch;import android.widget.Toast;public class ClientActivity extends Activity{		    private Button startClient;		    private static final String SERVER_IP ="127.0.0.1";	    private static final int SERVER_PORT =2013;	    private static List user_list =new ArrayList();//登录用户集合	    private static List<ServerThread> thread_list =new ArrayList<ServerThread>();//服务器已启用线程集合	    private static LinkedList<String> message_list =new LinkedList<String>();//存放消息队列	    private static boolean isPrint =false;//是否输出消息标志		private ListenerSocketReceiver lisSocketReceiver;		private Button startService;		private EditText mEtsend;		private Button mBtnSend;		private EditText mEtsend1;		private View mBtnSend1;		  private List<Socket> list =new ArrayList<Socket>();		  private List<BufferedWriter> listb =new ArrayList<BufferedWriter>();		private Button mBtnSend2;		public static Intent serviceIntent;	      	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.client);	/*	IntentFilter socketFilter = new IntentFilter();		socketFilter.addAction(BroadcastFinal.BROAD_LISTENER_SOCKET);		lisSocketReceiver = new ListenerSocketReceiver();		registerReceiver(lisSocketReceiver, socketFilter);			serviceIntent = new Intent();		// 开启服务		serviceIntent.setClass(this, ClientNetService.class);		serviceIntent.setAction("sljppff.service.ClientNetService");		startService(serviceIntent);*/		startClient =(Button)this.findViewById(R.id.startClient);		startClient.setOnClickListener(listener);		startService =(Button)this.findViewById(R.id.startService);		startService.setOnClickListener(listener);		mEtsend =(EditText)this.findViewById(R.id.mEtsend);		mBtnSend =(Button)this.findViewById(R.id.mBtnSend);		mBtnSend.setOnClickListener(listener);		mEtsend1 =(EditText)this.findViewById(R.id.mEtsend1);		mBtnSend1 =(Button)this.findViewById(R.id.mBtnSend1);		mBtnSend1.setOnClickListener(listener);		mBtnSend2 =(Button)this.findViewById(R.id.mBtnSend2);		mBtnSend2.setOnClickListener(listener);		}	public String GetIpAddress() {     	    WifiManager wifiManager = (WifiManager) getSystemService(WIFI_SERVICE);     	    WifiInfo wifiInfo = wifiManager.getConnectionInfo();     	    int i = wifiInfo.getIpAddress();	    return (i & 0xFF) + "." +     	    	   ((i >> 8 ) & 0xFF) + "." +     	    	   ((i >> 16 ) & 0xFF)+ "." +     	           ((i >> 24 ) & 0xFF );     	}      OnClickListener listener =new OnClickListener() {	@Override	public void onClick(View v) {		switch (v.getId()) {		case R.id.startService:				 new Thread(new Runnable() {										@Override					public void run() {						 try {			            while(true){//监听客户端请求，启个线程处理			            	ServerSocket server=new ServerSocket(9000);			                Socket socket = server.accept();			                new ServerThread(socket);			            }					        }catch (Exception e) {					        	//e.printStackTrace();					        }finally{					        							}				}}).start();			break;		case R.id.mBtnSend:		if(ClientNetService.writerThread!=null){		ClientNetService.writerThread.SetStr(mEtsend.getText().toString());			}			break;		case R.id.mBtnSend1:			//发送到客户端。			for(int i=0;i<list.size();i++){				try {					  BufferedWriter out = new BufferedWriter(new OutputStreamWriter(list.get(i).getOutputStream()));					  out.write(mEtsend1.getText().toString());					  out.flush();				} catch (IOException e) {					// TODO Auto-generated catch block								}			}						break;		case R.id.mBtnSend2:			//向服务端传送文件		//	/AndroidData/LJPPFF_20150427121356.png    			//   /storage/emulated/0/AndroidData/LJPPFF_20150428161900.png			Bitmap bm =BitmapFactory.decodeFile("/storage/emulated/0/AndroidData/LJPPFF_20150427111833.png");		  String str=	   ImageUtilbase64bitmap.bitmapToBase64(bm);		  ClientNetService.writerThread.SetStr(str);			break;		default:			break;		}			}	};/** * 服务器线程类 */class ServerThread extends Thread{    private Socket client;    private  InputStream in = null;    private String name;	private BufferedWriter out;          public ServerThread(Socket s)throws IOException{        client = s;        out =new BufferedWriter(new OutputStreamWriter(client.getOutputStream()));        in = client.getInputStream();        boolean haS =false;      for(int i=0;i<list.size();i++){    	  if(list.get(i).equals(client)){    		  haS =true;    	  }      }            if(!haS){    	  list.add(client);    	  listb.add(out);      }       // in.readLine();               // out.println("成功连上聊天室,请输入你的名字：");        start();    }    	/*if (ClientNetService.bw != null) {		ClientNetService.bw.write(str);		ClientNetService.bw.flush();	} else {*/          @Override    public void run() {                    int flag =0;            while (true) {				try {					Thread.sleep(500);				} catch (InterruptedException e) {					// TODO Auto-generated catch block								}			  // String inread = in.readLine().toString();				 byte[] bytes;				try {					bytes = new byte[in.available()];					in.read(bytes);					if(!TextUtils.isEmpty(new String(bytes).trim())){		            Message msg =new Message();		            msg.what =1;		            msg.obj =new String(bytes).trim();		           handler.sendMessage(msg);					}				} catch (IOException e) {					// TODO Auto-generated catch block								}		            			}       /* }catch (Exception e) {            //e.printStackTrace();        }finally{            try {                client.close();            }catch (IOException e) {                e.printStackTrace();            }            thread_list.remove(this);            user_list.remove(name);            pushMessage("Client<" + name +">退出了聊天室");        }*/    }          //放入消息队列末尾，准备发送给客户端    private void pushMessage(String msg){        message_list.addLast(msg);        isPrint =true;    }          //向客户端发送一条消息    private void sendMessage(String msg){    //    out.println(msg);    }          //统计在线用户列表    private String listOnlineUsers() {        String s ="--- 在线用户列表 ---\015\012";        for (int i =0; i < user_list.size(); i++) {            s +="[" + user_list.get(i) +"]\015\012";        }        s +="--------------------";        return s;    }}  private Handler handler =new Handler(){	public void handleMessage(android.os.Message msg) {		switch (msg.what) {		case 1:			Toast.makeText(getApplicationContext(), msg.obj.toString(), 0).show();			break;		default:			break;		}	};   };protected void onDestroy() {		/*if(lisSocketReceiver!=null){	unregisterReceiver(lisSocketReceiver);	}*/};}